    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.filter(cache => cache !== CACHE_NAME)
                .map(cache => caches.delete(cache))
            );
        })
    );
});const CACHE_NAME = "scan-ai-cache-v1";
const urlsToCache = [
    "/",
    "/index.html",
    "/manifest.json"
];

// Instalare Service Worker și stocarea fișierelor în cache
self.addEventListener("install", event => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log("Deschiderea cache-ului");
                return cache.addAll(urlsToCache);
            })
    );
});

// Interceptarea request-urilor și servirea din cache dacă este posibil
self.addEventListener("fetch", event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                return response || fetch(event.request);
            })
    );
});

// Ștergerea cache-urilor vechi la activare
self.addEventListener("activate", event => {
